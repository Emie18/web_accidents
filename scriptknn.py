# -*- coding: utf-8 -*-
"""ScriptKNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12qB1SFNVZ4KHYMYZsiwKD8cZwKuNENiG

#Projet IA groupe 1 trinôme 6
##Emilie Le Rouzic
##Gauthier Le Moal
##Hippolyte Requet

#Scipt qui utilise la méthode KNN pour prédire si un accient est grave ou pas grave
"""

from google.colab import drive
drive.mount("/content/gdrive/")

"""##importation du fichier CSV (à modifiersi besoin)"""

import pandas  as pd
accidents_file = "/content/gdrive/MyDrive/Projet_IA/export_IA2.csv"

"""##la Fonction"""

import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
import json

def knn_predict_accident(accident_info, accidents_file):
    # Charger le fichier CSV des accidents dans une DataFrame
    accidents_data = pd.read_csv(accidents_file, delimiter=";")

    #modification en 2 classes de la gravité
    accidents_data['descr_grav'] = accidents_data['descr_grav'].replace({
        'Indemne': 'pas grave',
        'Blessé léger': 'pas grave',
        'Blessé hospitalisé': 'grave',
        'Tué': 'grave'
    })
    #liste des colones que l'on garde
    columns_to_keep = ['descr_grav', 'latitude', 'longitude', 'descr_cat_veh',
                       'descr_agglo', 'descr_athmo', 'descr_lum', 'descr_etat_surf',
                       'descr_type_col','descr_dispo_secu']
    accidents_data = accidents_data[columns_to_keep]

    # Liste des colonnes à convertir
    columns_to_convert = ['descr_grav', 'descr_cat_veh', 'descr_agglo', 'descr_athmo', 'descr_lum',
                          'descr_etat_surf', 'descr_type_col','descr_dispo_secu']

    #convertion en float des latitudes et des longitudes
    accidents_data["latitude"] = accidents_data["latitude"].str.replace(',', '.')
    accidents_data["latitude"] = accidents_data["latitude"].astype(float)
    accidents_data["longitude"] = accidents_data["longitude"].str.replace(',', '.')
    accidents_data["longitude"] = accidents_data["longitude"].astype(float)
  
    # Création de l'objet LabelEncoder
    le = LabelEncoder()
    for var in columns_to_convert:
        accidents_data[var] = le.fit_transform(accidents_data[var])

    # Séparer les features (X) et les labels (y) à partir du jeu de données après le label encoding
    X = accidents_data.drop('descr_grav', axis=1)
    y = accidents_data['descr_grav']

    # Créer un modèle KNN avec k=5
    knn = KNeighborsClassifier(n_neighbors=5)

    # Ajuster le modèle aux données d'entraînement
    knn.fit(X, y)

    # Réorganiser les colonnes dans le jeu de données de test
    accident_info_reordered = pd.DataFrame.from_dict([accident_info], orient='columns')
    accident_info_reordered = accident_info_reordered[X.columns]

    # Prédire la classe de l'accident donné
    predicted_class = knn.predict(accident_info_reordered)

    # Convertir la prédiction en "grave" ou "pas grave"
    predicted_class_string = "grave" if predicted_class[0] == 0 else "pas grave"

    # Retourner la classe de l'accident sous forme de JSON
    result = {'descr_grav': predicted_class_string}
    json_result = json.dumps(result)
    #print(le.inverse_fit())

    return json_result

# Exemple d'utilisation du script
#les '#' montre un exemple d'accident grave
accident_info = {
    'descr_cat_veh': 21,#21
    'descr_agglo': 1,#1
    'descr_lum': 4,#4
    'descr_athmo': 0,#0
    'descr_etat_surf': 8,#8
    'descr_type_col': 0,#0
    'latitude': 47.1167,#47.1
    'longitude': -2.1000,#-2.1
    'descr_dispo_secu':7#7
}  
#appel de la fonction
predicted_class_json = knn_predict_accident(accident_info, accidents_file)
#affiche le resultat
print(predicted_class_json)